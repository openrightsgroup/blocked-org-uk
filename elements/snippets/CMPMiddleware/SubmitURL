<?php
//include CMP middleware stuff
$path_to_cmpmiddleware = $modx->getOption('core_path').'components/cmpmiddleware/';
include $path_to_cmpmiddleware.'cmpconfig.php';
include_once $path_to_cmpmiddleware.'cmpfunctions.php';

//GET FORM VALUES

//4DRXNE97LE = domainToCheck
//SSQ97709WZ = userEmail

$formFields = $hook->getValues();

$domainToCheck = $formFields['4DRXNE97LE'];
$userEmail = $formFields['SSQ97709WZ'];
$bogoEmail = $formFields['email'];
$bogoUrl = $formFields['url'];
$information = $formFields['information'];

//fill in values for checkboxes if not set
if (empty ($formFields['joinlist'])) {
    $hook->setValue('joinlist', 'no');
    $joinlist = 0;
}
else {
    $joinlist = 1;
}
if (empty ($formFields['allowcontact'])) {
    $hook->setValue('allowcontact', 'no');
    $allowcontact = 0;
}
else {
    $allowcontact = 1;
}
if (empty ($formFields['subscribereports'])) {
    $hook->setValue('subscribereports', 'no');
    $subscribereports = 0;
}
else {
    $subscribereports = 1;
}

// Present in database but not currently a form field
//$fullname = $formFields['fullname'];

// Database doesn't yet allow storage of these fields in our own format
//$category = $formFields['category'];
//$type = $formFields['type'];
//$content = $formFields['content'];

// Time of submission - the database currently adds this on insert
// - add to hook variables so can do more with it?
//$datestamp = date('Y-m-d H:i:s');
//$hook->setValue('datestamp_submitted', $datestamp);

//Trim leading and trailing spaces from URLs if present
$domainToCheck = trim($domainToCheck);

//check for 'http(s)' in url string
if (preg_match ('/^https?:\/\/.*/',$domainToCheck) == false) {
    //$modx->log(xPDO::LOG_LEVEL_ERROR,'SubmitURL: NO HTTP');
    $domainToCheck = 'http://'.$domainToCheck;
}

//Add corrected names back into Form Values...
$hook->setValue('userEmail',$userEmail);
$hook->setValue('domainToCheck',$domainToCheck);

//...and don't save the obfuscated or dummy ones
$hook->setValue('4DRXNE97LE', NULL);
$hook->setValue('SSQ97709WZ', NULL);
$hook->setValue('email', NULL);
$hook->setValue('url', NULL);

// SUBMIT URL

if (($bogoEmail + $bogoUrl) == '') {
    //Hidden fields not populated, probably not spam.

    $data = array(
            'email' => $cmpUSER,
            'url' => $domainToCheck,
            'additional_data' => http_build_query($hook->getValues()),
            'contactemail' => $userEmail,
            'allowcontact' => $allowcontact,
            'subscribereports' => $subscribereports,
            'joinlist' => $joinlist,
            'information' => $information
            );

    $data['signature'] = createSignatureHash($domainToCheck, $cmpSECRET);

    $content = http_build_query($data);

    // build the request
    $options = array(
            'http' => array(
                'timeout' => 10,
                'header' => "Content-type: application/x-www-form-urlencoded\r\n",
                'method' => 'POST',
                'content' => $content,
                )
            );

    // send it
    $ctx = stream_context_create($options);
    //$cmpAPI = "https://www.killock.net";
    $APIresult = file_get_contents("$cmpAPI/submit/url", false, $ctx);

    //for debugging purposes only
    //$modx->log(xPDO::LOG_LEVEL_ERROR,'SubmitURL:'.$check);

    //basic error checking
    if ($APIresult === false) {
        if ($APIresult == '') {
            $APIresult = 'Failed';
        }
    }

    // add api result to formit values
    $hook->setValue('APIresult', $APIresult);
}
else {
    //somehow the email/url fields are not blank, so set APIResult to mark as SPAM
    $hook->setValue('APIresult', 'SPAM');
}

//SUBMIT EMAIL TO E-ACTIVIST AS NECESSARY
if ($joinlist == 1) {
    //log for testing-purposes only
    //$modx->log(xPDO::LOG_LEVEL_ERROR,'SubmitURL: submitted to e-activist');

    //set POST variables for other site
    $foreignurl = 'https://e-activist.com/ea-campaign/clientcampaign.do';
    $formfields = array(
            //post parameters to be sent to the other website
            'ea_requested_action'=>urlencode('ea_submit_user_form'),
            'ea_javascript_enabled'=>urlencode('false'),
            'ea.AJAX.submit'=>urlencode('false'),
            'ea.campaign.id'=>urlencode('6472'),
            'ea.submitted.page'=>urlencode('1'),
            'Email Address'=>urlencode($userEmail)
            );

    //url-ify the data for the POST
    foreach($formfields as $key=>$value) {
        $formfields_string .= $key.'='.$value.'&';
    }
    $formfields_string = rtrim($formfields_string,'&');

    //open connection
    $ch = curl_init();

    //set the url, number of POST vars, POST data
    curl_setopt($ch,CURLOPT_URL,$foreignurl);
    curl_setopt($ch,CURLOPT_POST,count($formfields));
    curl_setopt($ch,CURLOPT_POSTFIELDS,$formfields_string);
    curl_setopt($ch,CURLOPT_FOLLOWLOCATION, 0);
    curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);
    curl_setopt($ch,CURLOP_HEADER,1);


    //execute post
    $POSTresult = curl_exec($ch);

    //debugging info
    //echo "---<br />";
    //echo "Formfields: ".$formfields_string.'<br />';
    //echo "URL: ".$foreignurl.'<br />';
    //echo "RESULT: ".$POSTresult.'<br />';

    //close connection
    curl_close($ch);
}


//must return true for FormIt to work
return true;
